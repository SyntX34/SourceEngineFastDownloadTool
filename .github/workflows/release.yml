name: Build and Release Multi-Platform

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_NAME: 'SourceEngineFastDownloadTool'
  BUILD_CONFIGURATION: 'Release'

jobs:
  build-multi-platform:
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
            extension: .exe
          - os: ubuntu-latest
            runtime: linux-x64
            extension: ''
          - os: ubuntu-latest
            runtime: linux-arm64
            extension: ''

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build application
      run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: Publish single executable (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        dotnet publish `
          --configuration $env:BUILD_CONFIGURATION `
          --runtime ${{ matrix.runtime }} `
          --self-contained true `
          --output ./publish-${{ matrix.runtime }} `
          -p:PublishSingleFile=true `
          -p:IncludeNativeLibrariesForSelfExtract=true `
          -p:IncludeAllContentForSelfExtract=true `
          -p:DebugType=None `
          -p:DebugSymbols=false `
          -p:EnableCompressionInSingleFile=true

    - name: Publish single executable (Linux)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        dotnet publish \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --runtime ${{ matrix.runtime }} \
          --self-contained true \
          --output ./publish-${{ matrix.runtime }} \
          -p:PublishSingleFile=true \
          -p:IncludeNativeLibrariesForSelfExtract=true \
          -p:IncludeAllContentForSelfExtract=true \
          -p:DebugType=None \
          -p:DebugSymbols=false \
          -p:EnableCompressionInSingleFile=true

    - name: Prepare release folder (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        mkdir release-assets-${{ matrix.runtime }}
        try { cp config.json release-assets-${{ matrix.runtime }} } catch { Write-Host "config.json not found" }
        try { cp filetypes.txt release-assets-${{ matrix.runtime }} } catch { Write-Host "filetypes.txt not found" }
        cp ./publish-${{ matrix.runtime }}/${{ env.PROJECT_NAME }}${{ matrix.extension }} release-assets-${{ matrix.runtime }}

        # Create batch file for Windows
        '@echo off' | Out-File release-assets-${{ matrix.runtime }}/Run.bat -Encoding ascii
        'echo Starting Source Engine FastDownload Tool...' | Out-File release-assets-${{ matrix.runtime }}/Run.bat -Append -Encoding ascii
        'echo.' | Out-File release-assets-${{ matrix.runtime }}/Run.bat -Append -Encoding ascii
        '%~dp0${{ env.PROJECT_NAME }}.exe %*' | Out-File release-assets-${{ matrix.runtime }}/Run.bat -Append -Encoding ascii
        'pause' | Out-File release-assets-${{ matrix.runtime }}/Run.bat -Append -Encoding ascii

    - name: Prepare release folder (Linux)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        mkdir release-assets-${{ matrix.runtime }}
        cp config.json release-assets-${{ matrix.runtime }}/ 2>/dev/null || echo "config.json not found"
        cp filetypes.txt release-assets-${{ matrix.runtime }}/ 2>/dev/null || echo "filetypes.txt not found"
        cp ./publish-${{ matrix.runtime }}/${{ env.PROJECT_NAME }}${{ matrix.extension }} release-assets-${{ matrix.runtime }}/

        # Create run script for Linux
        echo '#!/bin/bash' > release-assets-${{ matrix.runtime }}/run.sh
        echo 'echo "Starting Source Engine FastDownload Tool..."' >> release-assets-${{ matrix.runtime }}/run.sh
        echo 'chmod +x ./${{ env.PROJECT_NAME }}' >> release-assets-${{ matrix.runtime }}/run.sh
        echo './${{ env.PROJECT_NAME }} "$@"' >> release-assets-${{ matrix.runtime }}/run.sh
        chmod +x release-assets-${{ matrix.runtime }}/run.sh

    - name: Install zip (Linux only)
      if: runner.os != 'Windows'
      run: sudo apt-get update && sudo apt-get install -y zip

    - name: Create ZIP archive
      shell: bash
      run: |
        version="${GITHUB_REF##*/}"
        zipName="${{ env.PROJECT_NAME }}-${version}-${{ matrix.runtime }}.zip"
        cd release-assets-${{ matrix.runtime }}
        zip -r "../$zipName" ./*
        cd ..
        echo "ZIP_NAME=$zipName" >> $GITHUB_ENV

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ matrix.runtime }}
        path: ${{ env.ZIP_NAME }}

  create-release:
    needs: build-multi-platform
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: List downloaded artifacts
      run: ls -R ./artifacts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./artifacts/**/*.zip
        generate_release_notes: true
        draft: false
        prerelease: false
